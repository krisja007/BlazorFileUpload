@page "/"
@using System.Net.Http.Headers;
@using BlazorFileUpload.Shared;
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<h1>File Upload by Blazor</h1>

<InputFile OnChange="@OnInputFileChange" multiple />

@if (fileNames.Count > 0)
{
    <ul>
        @foreach (var fileName in fileNames)
        {
            <li>
                File: @fileName
                <br>
                <span>
                    Stored File Name: @GetStoredFileName(fileName)
                </span>
            </li>
        }
    </ul>
}



@code{
    //vauleFile//
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();


    //method Upload File//
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
        {
            using var content = new MultipartFormDataContent();

            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                fileNames.Add(file.Name);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);
            }

        //API //
        var response = await Http.PostAsync("/api/File", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }

       }


    //Stored File Name//
    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
            return uploadResult.StoredFileName;

        return "File not found.";
    }


}
